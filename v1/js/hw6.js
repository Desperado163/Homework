console.log('%c –î–æ–º–∞—à–Ω—è—è —Ä–∞–±–æ—Ç–∞ ‚Ññ6.', 'color:red');

console.log('\n%c –ó–∞–¥–∞–Ω–∏–µ ‚Ññ1:', 'color:green');
const numbs = [1, 5, 4, 10, 0, 3];
for (let i = 0; i < numbs.length; i++) {
    console.log (numbs[i]);
    if (numbs[i] === 10) break;
}

console.log('\n%c –ó–∞–¥–∞–Ω–∏–µ ‚Ññ2:', 'color:green');
let position = numbs.indexOf(4);
console.log(position, ` - –∏–Ω–¥–µ–∫—Å –∑–Ω–∞—á–µ–Ω–∏—è 4`);

console.log('\n%c –ó–∞–¥–∞–Ω–∏–µ ‚Ññ3:', 'color:green');
const numbers = [1, 3, 5, 10, 20];
let joinedNumbers = numbers.join(' ');
console.log(joinedNumbers);

console.log('\n%c –ó–∞–¥–∞–Ω–∏–µ ‚Ññ4:', 'color:green');
let arr = [
    [1, 1, 1],
    [1, 1, 1],
    [1, 1, 1],
];

for (let arrIn of arr) {
    for (let element of arrIn) {
        console.log(element);
    }
}

console.log('\n%c –ó–∞–¥–∞–Ω–∏–µ ‚Ññ5:', 'color:green');
const numArr = [1, 1, 1];
numArr.push(2, 2, 2);
console.log(numArr);

console.log('\n%c –ó–∞–¥–∞–Ω–∏–µ ‚Ññ6:', 'color:green');
const compArr = [9, 8, 7, 'a', 6, 5];
compArr.sort();
compArr.pop();
console.log(compArr);

// console.log('\n%c –ó–∞–¥–∞–Ω–∏–µ ‚Ññ7:', 'color:green');
// const guess = [9, 8, 7, 6, 5];
// let userNumber = Number(prompt("–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ:"));
// guess.includes(userNumber) 
// ? alert(`–£–≥–∞–¥–∞–ª!üèÜ`)
// : alert(`–ù–µ —É–≥–∞–¥–∞–ª!üò≠`)

console.log('\n%c –ó–∞–¥–∞–Ω–∏–µ ‚Ññ8:', 'color:green');
let string = 'abcdef';
console.log(`–î–∞–Ω–∞ —Å—Ç—Ä–æ–∫–∞:`, string);
let stringSplit = string.split("");
console.log(`–ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å—Ç—Ä–æ–∫—É –≤ –º–∞—Å—Å–∏–≤ –º–µ—Ç–æ–¥–æ–º Split:`, stringSplit);
let stringReverse = stringSplit.reverse();
console.log(`–ü–µ—Ä–µ–≤–æ—Ä–∞—á–∏–≤–∞–µ–º –º–∞—Å—Å–∏–≤ –º–µ—Ç–æ–¥–æ–º Reverse:`, stringReverse);
let stringJoin = stringReverse.join("");
console.log(`–ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –º–∞—Å—Å–∏–≤ –≤ —Å—Ç—Ä–æ–∫—É –º–µ—Ç–æ–¥–æ–º Join:`, stringJoin);

console.log('\n%c –ó–∞–¥–∞–Ω–∏–µ ‚Ññ9:', 'color:green');
let multiArr = [
    [1, 2, 3],
    [4, 5, 6],
];
let simpleArr = multiArr.flat();
console.log(simpleArr);

console.log('\n%c –ó–∞–¥–∞–Ω–∏–µ ‚Ññ10:', 'color:green');
let rndArray = Array.from({length: 10}, () => ~~(Math.random() * 10) + 1);
console.log(`–ú–∞—Å—Å–∏–≤ –∏–∑ 10 —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –æ—Ç 1 –¥–æ 10:`, rndArray);

for (let i = 0; i < rndArray.length - 1; i++) {
    console.log(`${rndArray[i]} + ${rndArray[i + 1]} = ${rndArray[i] + rndArray[i + 1]}`);
}

console.log('\n%c –ó–∞–¥–∞–Ω–∏–µ ‚Ññ11:', 'color:green');
console.log(`–ú–∞—Å—Å–∏–≤ –∏–∑ 10 —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –æ—Ç 1 –¥–æ 10:`, rndArray);

rndArray.forEach((val, i, arr) => {
    if (i < arr.length) {
        console.log(`–ö–∞–¥—Ä–∞—Ç —á–∏—Å–ª–∞ ${val} —Ä–∞–≤–µ–Ω: ${val ** 2} `)
    }
})

console.log('\n%c –ó–∞–¥–∞–Ω–∏–µ ‚Ññ12:', 'color:green');
const stringArr = ['–ú–∏—Ä', '–î—Ä—É–∂–±–∞', '–ñ–≤–∞—á–∫–∞'];
console.log(`–ú–∞—Å—Å–∏–≤ —Å–ª–æ–≤:`, stringArr);
const lengthWord = stringArr.map(word => word.length);
console.log(`–ú–∞—Å—Å–∏–≤ –¥–ª–∏–Ω—ã —Å–ª–æ–≤:`, lengthWord);

console.log('\n%c –ó–∞–¥–∞–Ω–∏–µ ‚Ññ13:', 'color:green');
let rndNegativeArr = Array.from({length: 20}, () => ~~(Math.random() * 201) - 100);
console.log(`–ú–∞—Å—Å–∏–≤ –∏–∑ 20 —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –æ—Ç -100 –¥–æ 100:`, rndNegativeArr);
const negativeArr = rndNegativeArr.filter(num => num < 0);
console.log(`–ù–æ–≤—ã–π –º–∞—Å—Å–∏–≤ –∏–∑ –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤:`, negativeArr);

console.log('\n%c –ó–∞–¥–∞–Ω–∏–µ ‚Ññ14:', 'color:green');
let rndArrayTen = Array.from({length: 10}, () => ~~(Math.random() * 10));
console.log(`–ú–∞—Å—Å–∏–≤ –∏–∑ 10 —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –æ—Ç 0 –¥–æ 10:`, rndArrayTen);
const honestArr = rndArrayTen.filter(num => num % 2 === 0);
console.log(`–ù–æ–≤—ã–π –º–∞—Å—Å–∏–≤ –∏–∑ —á–µ—Ç–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤:`, honestArr);

console.log('\n%c –ó–∞–¥–∞–Ω–∏–µ ‚Ññ15:', 'color:green');
let rndArraySix = Array.from({length: 6}, () => ~~(Math.random() * 10) + 1);
console.log(`–ú–∞—Å—Å–∏–≤ –∏–∑ 6 —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –æ—Ç 1 –¥–æ 10:`, rndArraySix);

const summArr = rndArraySix.reduce((total, rndArraySix) => total + rndArraySix, 0);
console.log(`–°—Ä–µ–¥–Ω–µ–µ –∞—Ä–∏—Ñ–º–µ—Ç–∏—á–µ—Å–∫–æ–µ —ç–ª–µ–º–Ω—Ç–æ–≤ –º–∞—Å—Å–∏–≤–∞ —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç: ${summArr / rndArraySix.length}`);